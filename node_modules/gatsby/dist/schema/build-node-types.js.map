{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","tracer","globalTracer","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromFields","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","pageDependencyResolver","setFileNodeRootType","clearTypeExampleValues","runQuery","module","exports","parentSpan","spanArgs","childOf","span","startSpan","types","groupBy","filter","node","internal","ignoreType","type","processedTypes","createNodeFields","defaultNodeFields","id","description","parent","resolve","children","map","childNodesByType","nodes","flatMap","camelCase","undefined","value","Object","keys","forEach","childNodeType","maxChildCount","maxBy","values","c","g","length","nodeObjectType","find","inferredFields","ignoreFields","fieldsFromPlugins","createType","typeName","intermediateType","name","traceId","mergedFieldsFromPlugins","merge","inferredInputFieldsFromPlugins","fields","gqlType","interfaces","proccesedType","isTypeOf","inferedInputFields","filterFields","args","a","queryArgs","isObject","results","firstOnly","Promise","all","finish"],"mappings":"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","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n} = require(`graphql`)\nconst tracer = require(`opentracing`).globalTracer()\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromFields,\n} = require(`./infer-graphql-input-fields-from-fields`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode } = require(`../db/nodes`)\nconst pageDependencyResolver = require(`./page-dependency-resolver`)\nconst { setFileNodeRootType } = require(`./types/type-file`)\nconst { clearTypeExampleValues } = require(`./data-tree-utils`)\nconst { runQuery } = require(`../db/nodes`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = {\n  [typeName: string]: ProcessedNodeType,\n}\n\nmodule.exports = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  const types = _.groupBy(\n    getNodes().filter(node => node.internal && !node.internal.ignoreType),\n    node => node.internal.type\n  )\n  const processedTypes: TypeMap = {}\n\n  clearTypeExampleValues()\n\n  // Reset stored File type to not point to outdated type definition\n  setFileNodeRootType(null)\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve: pageDependencyResolver(node => getNode(node.parent)),\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve: pageDependencyResolver(node => node.children.map(getNode)),\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve: pageDependencyResolver(node =>\n            node.children\n              .map(getNode)\n              .filter(node => _.camelCase(node.internal.type) === childNodeType)\n          ),\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve: pageDependencyResolver(node =>\n            node.children\n              .map(getNode)\n              .find(node => _.camelCase(node.internal.type) === childNodeType)\n          ),\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      ignoreFields: Object.keys(type.fieldsFromPlugins),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n      parentSpan: span,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n\n    const inferredInputFieldsFromPlugins = inferInputObjectStructureFromFields({\n      fields: mergedFieldsFromPlugins,\n    })\n\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const filterFields = _.merge(\n      {},\n      inferedInputFields.inferredFields,\n      inferredInputFieldsFromPlugins.inferredFields\n    )\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: filterFields,\n        resolve: pageDependencyResolver(async (a, queryArgs) => {\n          if (!_.isObject(queryArgs)) {\n            queryArgs = {}\n          }\n\n          const results = await runQuery({\n            queryArgs: {\n              filter: {\n                ...queryArgs,\n              },\n            },\n            firstOnly: true,\n            gqlType,\n          })\n\n          if (results.length > 0) {\n            return results[0]\n          } else {\n            return null\n          }\n        }),\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n\n    // Special case to construct linked file type used by type inferring\n    if (typeName === `File`) {\n      setFileNodeRootType(gqlType)\n    }\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  span.finish()\n\n  return processedTypes\n}\n"],"file":"build-node-types.js"}